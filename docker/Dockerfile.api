# Stage 1: Build the application
FROM rust:latest AS builder

WORKDIR /app

# Install required dependencies
RUN apt-get update && apt-get install -y \
    curl \
    build-essential \
    pkg-config \
    libssl-dev \
    git \
    && rm -rf /var/lib/apt/lists/*

# Configure cargo to use git CLI for fetching
RUN mkdir -p /root/.cargo && \
    echo '[net]\ngit-fetch-with-cli = true' > /root/.cargo/config.toml

# Copy .env file
COPY .env .

# Install the RISC Zero toolchain
RUN curl -L https://risczero.com/install | bash && \
    /root/.risc0/bin/rzup install || true && \
    mkdir -p /root/.cargo/bin && \
    (ln -sf /root/.risc0/bin/cargo-risczero /root/.cargo/bin/cargo-risczero || echo "Symlink creation failed, checking directories..." && ls -la /root/.risc0/bin && ls -la /root/.cargo)

ENV PATH="/root/.risc0/bin:/root/.cargo/bin:$PATH"

# Copy Cargo.toml and Cargo.lock
COPY Cargo.toml Cargo.lock ./

# Copy all workspace crates
COPY crates ./crates

# Source .env and build in the same RUN command to preserve environment
RUN set -a && \
    . ./.env && \
    set +a && \
    cargo build --release --package state-proof-api

# Stage 2: Create a minimal runtime image
FROM debian:bookworm-slim

# Set up the working directory
WORKDIR /app

# Install runtime dependencies with OpenSSL 3
RUN apt-get update && apt-get install -y \
    ca-certificates \
    openssl \
    libssl3 \
    && rm -rf /var/lib/apt/lists/*

# Copy the .env file for runtime configuration
COPY .env.docker /app/.env.docker

# Copy the compiled binary from the builder stage
COPY --from=builder /app/target/release/state-proof-api /usr/local/bin/state-proof-api

# Make the binary executable
RUN chmod +x /usr/local/bin/state-proof-api

# Expose the port the API listens on
EXPOSE 3000

# Define the entrypoint with default arguments
ENTRYPOINT ["state-proof-api", "--env-file", "/app/.env.docker"] 