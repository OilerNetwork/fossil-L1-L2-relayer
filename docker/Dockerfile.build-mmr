# Stage 1: Build the application
FROM rust:latest AS builder

WORKDIR /app

# Install Foundry (includes Anvil)
RUN curl -L https://foundry.paradigm.xyz | bash && \
    /root/.foundry/bin/foundryup

# Add foundry binaries to PATH
ENV PATH="/root/.foundry/bin:$PATH"

# Copy .env file
COPY .env .

# Source DATABASE_URL from .env
RUN set -a && . ./.env && set +a

# Install the RISC Zero toolchain
RUN curl -L https://risczero.com/install | bash && \
    /root/.risc0/bin/rzup install || true && \
    mkdir -p /root/.cargo/bin && \
    (ln -sf /root/.risc0/bin/cargo-risczero /root/.cargo/bin/cargo-risczero || echo "Symlink creation failed, checking directories..." && ls -la /root/.risc0/bin && ls -la /root/.cargo)

ENV PATH="/root/.risc0/bin:/root/.cargo/bin:$PATH"

# Step 1: Copy Cargo.toml and Cargo.lock
COPY Cargo.toml Cargo.lock ./

# Step 2: Copy the workspace crates
COPY crates ./crates

# Build the application
RUN cargo build --release --package publisher --bin build-mmr

# Stage 2: Create a minimal runtime image
FROM debian:bookworm-slim

WORKDIR /app

# Install runtime dependencies and Foundry
RUN apt-get update && apt-get install -y \
    ca-certificates \
    openssl \
    libssl3 \
    curl \
    git \
    && rm -rf /var/lib/apt/lists/* \
    && curl -L https://foundry.paradigm.xyz | bash \
    && /root/.foundry/bin/foundryup

# Add foundry binaries to PATH
ENV PATH="/root/.foundry/bin:$PATH"

# Copy the compiled binary from the builder stage
COPY --from=builder /app/target/release/build-mmr .

# Make the binary executable
RUN chmod +x /app/build-mmr

# Define the entrypoint
ENTRYPOINT ["/app/build-mmr"]
CMD ["-n", "1"]