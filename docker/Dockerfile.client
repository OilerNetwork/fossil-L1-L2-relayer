# Stage 1: Build the application
FROM rust:latest AS builder

WORKDIR /app

# Install the RISC Zero toolchain
RUN curl -L https://risczero.com/install | bash && \
    /root/.risc0/bin/rzup install || true && \
    mkdir -p /root/.cargo/bin && \
    (ln -sf /root/.risc0/bin/cargo-risczero /root/.cargo/bin/cargo-risczero || echo "Symlink creation failed, checking directories..." && ls -la /root/.risc0/bin && ls -la /root/.cargo)

ENV PATH="/root/.risc0/bin:/root/.cargo/bin:$PATH"

# Step 1: Copy Cargo.toml and Cargo.lock
COPY Cargo.toml Cargo.lock ./

# Step 2: Copy the workspace crates first
COPY crates ./crates

# Step 3: Create necessary directories and copy pre-fetched dependencies
RUN mkdir -p /usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/cc-1.2.2/src/target && \
    mkdir -p /usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/cc-1.2.2/src/windows && \
    mkdir -p /usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/cc-1.2.2/src/parallel

# Debug the build context
RUN echo "=== Build Context ===" && \
    pwd && \
    ls -la && \
    echo "=== Vendor Directory (if exists) ===" && \
    ls -R vendor || echo "No vendor directory found!"

# Only proceed with copy if directory exists
RUN mkdir -p /usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/cc-1.2.2/src/{target,windows,parallel}

# Create the destination directory with correct permissions
RUN mkdir -p /usr/local/cargo/registry/src/github.com-1ecc6299db9ec823 && \
    chmod 755 /usr/local/cargo/registry/src/github.com-1ecc6299db9ec823

# Copy the vendor directory with permissions preserved
COPY --chown=root:root vendor/ /usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/

# Debug and verify the copy
RUN echo "=== Debug: Directory structure after copy ===" && \
    find /usr/local/cargo/registry/src/github.com-1ecc6299db9ec823 -type d && \
    echo "=== Debug: All files in cc-1.2.2 ===" && \
    find /usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/cc-1.2.2 -type f && \
    echo "=== Debug: Setting final permissions ===" && \
    chmod -R u+r,g+r /usr/local/cargo/registry/src/github.com-1ecc6299db9ec823

# Create cargo config for vendored dependencies
RUN mkdir -p /usr/local/cargo/registry && \
    echo '[source.crates-io]\n\
replace-with = "vendored-sources"\n\
\n\
[source."git+https://github.com/risc0/RustCrypto-hashes.git"]\n\
git = "https://github.com/risc0/RustCrypto-hashes.git"\n\
tag = "sha2-v0.10.8-risczero.0"\n\
replace-with = "vendored-sources"\n\
\n\
[source."git+https://github.com/xJonathanLEI/starknet-rs.git"]\n\
git = "https://github.com/xJonathanLEI/starknet-rs.git"\n\
branch = "master"\n\
replace-with = "vendored-sources"\n\
\n\
[source."git+https://github.com/ametel01/rust-accumulators.git"]\n\
git = "https://github.com/ametel01/rust-accumulators.git"\n\
branch = "feat/sha2-hasher"\n\
replace-with = "vendored-sources"\n\
\n\
[source."git+https://github.com/ametel01/eth-rlp-verify.git"]\n\
git = "https://github.com/ametel01/eth-rlp-verify.git"\n\
replace-with = "vendored-sources"\n\
\n\
[source."git+https://github.com/ametel01/garaga.git"]\n\
git = "https://github.com/ametel01/garaga.git"\n\
replace-with = "vendored-sources"\n\
\n\
[source."git+https://github.com/risc0/risc0-ethereum.git"]\n\
git = "https://github.com/risc0/risc0-ethereum"\n\
tag = "v1.1.4"\n\
replace-with = "vendored-sources"\n\
\n\
[source."git+https://github.com/lambdaclass/lambdaworks.git"]\n\
git = "https://github.com/lambdaclass/lambdaworks.git"\n\
replace-with = "vendored-sources"\n\
\n\
[source.vendored-sources]\n\
directory = "/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823"\n\
\n\
[net]\n\
offline = true\n\
\n\
[patch.crates-io]\n\
sha2 = { git = "https://github.com/risc0/RustCrypto-hashes.git", tag = "sha2-v0.10.8-risczero.0" }' > /usr/local/cargo/config.toml

# Step 4: Build the application
ARG DATABASE_URL
ENV DATABASE_URL=${DATABASE_URL}
RUN cargo build --release --package client

# Stage 2: Create a minimal runtime image
FROM debian:bookworm-slim

# Set up the working directory
WORKDIR /app

# Install runtime dependencies with OpenSSL 3
RUN apt-get update && apt-get install -y \
    ca-certificates \
    openssl \
    libssl3 \
    && rm -rf /var/lib/apt/lists/*

# Copy the compiled binary from the builder stage to /usr/local/bin
COPY --from=builder /app/target/release/client /usr/local/bin/client

# Make the binary executable
RUN chmod +x /usr/local/bin/client

# Define the entrypoint
CMD ["client"]
